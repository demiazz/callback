{"version":3,"sources":["../../src/devtools/index.js"],"names":["Devtools","options","trees","latestExecutionId","version","init","ws","host","event","message","JSON","parse","data","type","sendInitial","tree","push","contextProviders","unshift","Provider","watchExecution","splice","indexOf","removeAllListeners","reduce","newTrees","forEach","remove","stringify","source","sendMessage","backlog","length","sendBulkMessage","isConnected","debuggingData","context","functionDetails","payload","execution","executionId","id","functionIndex","datetime","safeStringify","sendExecutionData","bind","provider","debugger","send","wrapProvider","providerKey","Object","keys","wrappedProvider","key","originalFunc","args","method","apply"],"mappings":"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","file":"index.js","sourcesContent":["/* global VERSION */\nimport DevtoolsBase from './base'\nimport WebSocket from 'universal-websocket-client'\n\nexport class Devtools extends DevtoolsBase {\n  constructor(options) {\n    super(options)\n    this.trees = []\n    this.latestExecutionId = null\n    this.version = VERSION\n    this.init()\n  }\n  createSocket() {\n    this.ws = new WebSocket(`ws://${this.host}`)\n  }\n  onMessage(event) {\n    const message = JSON.parse(event.data)\n    switch (message.type) {\n      case 'pong':\n        this.sendInitial()\n        break\n      case 'ping':\n        this.sendInitial()\n        break\n    }\n  }\n  add(tree) {\n    this.trees.push(tree)\n    tree.contextProviders.unshift(this.Provider())\n    this.watchExecution(tree, 'ft')\n  }\n  remove(tree) {\n    this.trees.splice(this.trees.indexOf(tree), 1)\n    tree.contextProviders.splice(0, 1)\n\n    tree.removeAllListeners('start')\n    tree.removeAllListeners('end')\n    tree.removeAllListeners('pathStart')\n    tree.removeAllListeners('functionStart')\n    tree.removeAllListeners('functionEnd')\n    tree.removeAllListeners('error')\n  }\n  removeAll() {\n    const trees = this.trees.reduce((newTrees, tree) => {\n      newTrees.push(tree)\n      return newTrees\n    }, [])\n    trees.forEach(tree => {\n      this.remove(tree)\n    })\n  }\n  sendInitial() {\n    const message = JSON.stringify({\n      type: 'init',\n      source: 'ft',\n      version: this.version,\n    })\n\n    this.sendMessage(message)\n    if (this.backlog.length) {\n      this.sendBulkMessage(this.backlog, 'ft')\n      this.backlog = []\n    }\n    this.isConnected = true\n  }\n  /*\n    Create the stringified message for the debugger. As we need to\n    store mutations with the default true \"storeMutations\" option used\n    by time travel and jumping between Cerebral apps, we are careful\n    not doing unnecessary stringifying.\n  */\n  createExecutionMessage(debuggingData, context, functionDetails, payload) {\n    const type = 'execution'\n    const data = {\n      execution: {\n        executionId: context.execution.id,\n        functionIndex: functionDetails.functionIndex,\n        payload: payload,\n        datetime: context.execution.datetime,\n        data: debuggingData,\n      },\n    }\n\n    return this.safeStringify({\n      type: type,\n      source: 'ft',\n      version: this.version,\n      data: data,\n    })\n  }\n  Provider() {\n    const sendExecutionData = this.sendExecutionData.bind(this)\n    function provider(context, functionDetails, payload) {\n      context.debugger = {\n        send(data) {\n          sendExecutionData(data, context, functionDetails, payload)\n        },\n        wrapProvider(providerKey) {\n          const provider = context[providerKey]\n\n          context[providerKey] = Object.keys(\n            provider\n          ).reduce((wrappedProvider, key) => {\n            const originalFunc = provider[key]\n\n            wrappedProvider[key] = (...args) => {\n              context.debugger.send({\n                method: `${providerKey}.${key}`,\n                args: args,\n              })\n\n              return originalFunc.apply(provider, args)\n            }\n\n            return wrappedProvider\n          }, {})\n        },\n      }\n\n      return context\n    }\n\n    return provider\n  }\n}\n\nexport default Devtools\n"]}