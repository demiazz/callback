{"version":3,"sources":["../../src/providers/Context.js"],"names":["ContextProvider","extendedContext","context","funcDetails","payload","Object","keys","reduce","key","debugger","proto","constructor","prototype","Function","contextValue","proxy","sourceKeys","target","obj","objKey","args","send","method","apply","defineProperty","get","set","value","getOwnPropertyNames"],"mappings":"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","file":"Context.js","sourcesContent":["export default function ContextProvider(extendedContext) {\n  return (context, funcDetails, payload) => {\n    return Object.keys(extendedContext).reduce((context, key) => {\n      if (context.debugger) {\n        context[key] = {}\n\n        /*\n          Grab the prototype to add methods to proxy.\n          We only grab actual added prototypes on first level, not nested and not\n          where prototype is base prototypes like Objects and Functions\n        */\n        let proto = null\n\n        if (\n          extendedContext[key].constructor &&\n          extendedContext[key].constructor.prototype.constructor !==\n            Object.prototype.constructor &&\n          extendedContext[key].constructor.prototype.constructor !==\n            Function.prototype.constructor\n        ) {\n          proto = extendedContext[key].constructor.prototype\n        }\n\n        // The value might be a function that is already wrapped, try grabbing the original\n        const contextValue = extendedContext[key]\n\n        /*\n          Wraps methods and sends their payload through the debugger\n        */\n        const proxy = (sourceKeys, target) => {\n          return sourceKeys.reduce(function(obj, objKey) {\n            if (typeof contextValue[objKey] === 'function') {\n              obj[objKey] = (...args) => {\n                context.debugger.send({\n                  method: `${key}.${objKey}`,\n                  args,\n                })\n\n                return contextValue[objKey].apply(contextValue, args)\n              }\n            } else if (!(objKey in obj)) {\n              Object.defineProperty(obj, objKey, {\n                get() {\n                  return contextValue[objKey]\n                },\n                set(value) {\n                  context.debugger.send({\n                    method: key + '.' + objKey + ' =',\n                    args: [value],\n                  })\n                  contextValue[objKey] = value\n                },\n              })\n            }\n\n            return obj\n          }, target)\n        }\n\n        // If the context value is a function, wrap it\n        if (typeof contextValue === 'function') {\n          context[key] = (...args) => {\n            context.debugger.send({\n              method: key,\n              args,\n            })\n            return contextValue.apply(null, args)\n          }\n        }\n\n        // Go through keys original value and wrap any attached methods\n        context[key] = proxy(Object.keys(contextValue), context[key]) // Object.keys(contextValue).reduce(proxy, context[key])\n        // Go through proto\n        context[key] = proto\n          ? proxy(Object.getOwnPropertyNames(proto), context[key])\n          : context[key]\n      } else {\n        context[key] = extendedContext[key]\n      }\n\n      return context\n    }, context)\n  }\n}\n"]}