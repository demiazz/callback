{"version":3,"sources":["../../src/providers/StopExecution.js"],"names":["StopExecutionProviderFactory","conditions","StopExecutionProvider","context","funcDetails","payload","execution","name","Error"],"mappings":";;;;;kBAEwBA,4B;;AAFxB;;AAEe,SAASA,4BAAT,GAAuD;AAAA,MAAjBC,UAAiB,uEAAJ,EAAI;;AACpE,SAAO,SAASC,qBAAT,CAA+BC,OAA/B,EAAwCC,WAAxC,EAAqDC,OAArD,EAA8D;AACnE,QACEJ,WAAWE,QAAQG,SAAR,CAAkBC,IAA7B,KACAN,WAAWE,QAAQG,SAAR,CAAkBC,IAA7B,EAAmCJ,OAAnC,CAFF,EAGE;AACA,YAAM,uCACJA,QAAQG,SADJ,EAEJF,WAFI,EAGJC,OAHI,EAIJ,IAAIG,KAAJ,CAAU,gCAAV,CAJI,CAAN;AAMD;;AAED,WAAOL,OAAP;AACD,GAdD;AAeD","file":"StopExecution.js","sourcesContent":["import { FunctionTreeExecutionError } from '../errors'\n\nexport default function StopExecutionProviderFactory(conditions = {}) {\n  return function StopExecutionProvider(context, funcDetails, payload) {\n    if (\n      conditions[context.execution.name] &&\n      conditions[context.execution.name](context)\n    ) {\n      throw new FunctionTreeExecutionError(\n        context.execution,\n        funcDetails,\n        payload,\n        new Error('Execution stopped by condition')\n      )\n    }\n\n    return context\n  }\n}\n"]}