{"version":3,"sources":["../src/DEFAULT_OPTIONS.js"],"names":["method","baseUrl","headers","Accept","onRequest","xhr","options","body","indexOf","JSON","stringify","withCredentials","Boolean","Object","keys","forEach","setRequestHeader","key","send","onResponse","resolve","reject","result","responseText","getResponseHeader","parse","responseHeaders","status"],"mappings":";;;;;;AAAA;;AACA;;;;;;kBAEe;AACbA,UAAQ,KADK;AAEbC,WAAS,EAFI;AAGbC,WAAS;AACP,oBAAgB,iCADT;AAEPC,YAAQ;AAFD,GAHI;AAObC,WAPa,qBAOHC,GAPG,EAOEC,OAPF,EAOW;AACtB,QACEA,QAAQJ,OAAR,CAAgB,cAAhB,MAAoC,mCADtC,EAEE;AACAI,cAAQC,IAAR,GAAe,sBAAUD,QAAQC,IAAlB,CAAf;AACD,KAJD,MAIO,IACLD,QAAQJ,OAAR,CAAgB,cAAhB,EAAgCM,OAAhC,CAAwC,kBAAxC,KAA+D,CAD1D,EAEL;AACAF,cAAQC,IAAR,GAAeE,KAAKC,SAAL,CAAeJ,QAAQC,IAAvB,CAAf;AACD;;AAEDF,QAAIM,eAAJ,GAAsBC,QAAQN,QAAQK,eAAhB,CAAtB;;AAEAE,WAAOC,IAAP,CAAYR,QAAQJ,OAApB,EAA6Ba,OAA7B,CAAqC,eAAO;AAC1CV,UAAIW,gBAAJ,CAAqBC,GAArB,EAA0BX,QAAQJ,OAAR,CAAgBe,GAAhB,CAA1B;AACD,KAFD;;AAIAZ,QAAIa,IAAJ,CAASZ,QAAQC,IAAjB;AACD,GAzBY;AA0BbY,YA1Ba,sBA0BFd,GA1BE,EA0BGe,OA1BH,EA0BYC,MA1BZ,EA0BoB;AAC/B,QAAIC,SAASjB,IAAIkB,YAAjB;;AAEA,QACED,UACAjB,IAAImB,iBAAJ,CAAsB,cAAtB,EAAsChB,OAAtC,CAA8C,kBAA9C,KAAqE,CAFvE,EAGE;AACAc,eAASb,KAAKgB,KAAL,CAAWpB,IAAIkB,YAAf,CAAT;AACD;;AAED,QAAMG,kBAAkB,kCAAsBrB,GAAtB,CAAxB;;AAEA,QAAIA,IAAIsB,MAAJ,IAAc,GAAd,IAAqBtB,IAAIsB,MAAJ,GAAa,GAAtC,EAA2C;AACzCP,cAAQ;AACNO,gBAAQtB,IAAIsB,MADN;AAENzB,iBAASwB,eAFH;AAGNJ,gBAAQA;AAHF,OAAR;AAKD,KAND,MAMO;AACLD,aAAO,gCAAsBhB,IAAIsB,MAA1B,EAAkCD,eAAlC,EAAmDJ,MAAnD,CAAP;AACD;AACF;AA/CY,C","file":"DEFAULT_OPTIONS.js","sourcesContent":["import { urlEncode, getAllResponseHeaders } from './utils'\nimport HttpProviderError from './HttpProviderError'\n\nexport default {\n  method: 'get',\n  baseUrl: '',\n  headers: {\n    'Content-Type': 'application/json; charset=UTF-8',\n    Accept: 'application/json',\n  },\n  onRequest(xhr, options) {\n    if (\n      options.headers['Content-Type'] === 'application/x-www-form-urlencoded'\n    ) {\n      options.body = urlEncode(options.body)\n    } else if (\n      options.headers['Content-Type'].indexOf('application/json') >= 0\n    ) {\n      options.body = JSON.stringify(options.body)\n    }\n\n    xhr.withCredentials = Boolean(options.withCredentials)\n\n    Object.keys(options.headers).forEach(key => {\n      xhr.setRequestHeader(key, options.headers[key])\n    })\n\n    xhr.send(options.body)\n  },\n  onResponse(xhr, resolve, reject) {\n    let result = xhr.responseText\n\n    if (\n      result &&\n      xhr.getResponseHeader('Content-Type').indexOf('application/json') >= 0\n    ) {\n      result = JSON.parse(xhr.responseText)\n    }\n\n    const responseHeaders = getAllResponseHeaders(xhr)\n\n    if (xhr.status >= 200 && xhr.status < 300) {\n      resolve({\n        status: xhr.status,\n        headers: responseHeaders,\n        result: result,\n      })\n    } else {\n      reject(new HttpProviderError(xhr.status, responseHeaders, result))\n    }\n  },\n}\n"]}