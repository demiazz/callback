{"version":3,"sources":["../src/index.js"],"names":["default","HttpProviderFactory","passedOptions","moduleOptions","cachedProvider","HttpProvider","context","requests","createAbortablePromise","url","cb","Promise","resolve","reject","xhr","payload","error","requestService","options","onProgress","controller","getSignal","method","toUpperCase","http","request","get","passedQuery","query","Object","keys","length","post","body","put","patch","delete","updateOptions","newOptions","abort","regexp","matchingUrls","filter","Boolean","match","RegExp","forEach","uploadFile","files","baseUrl","send","debugger","wrapProvider"],"mappings":"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","file":"index.js","sourcesContent":["import request from './request'\nimport { urlEncode, mergeWith, createResponse } from './utils'\nimport FileUpload from './fileUpload'\n\nimport DEFAULT_OPTIONS from './DEFAULT_OPTIONS'\n\nexport { default as HttpProviderError } from './HttpProviderError'\n\nexport default function HttpProviderFactory(passedOptions) {\n  let moduleOptions = mergeWith({}, DEFAULT_OPTIONS)\n  if (typeof passedOptions === 'function') {\n    moduleOptions = passedOptions(moduleOptions)\n  } else if (passedOptions) {\n    moduleOptions = mergeWith(passedOptions, DEFAULT_OPTIONS)\n  }\n\n  let cachedProvider = null\n  function HttpProvider(context) {\n    const requests = {}\n    function createAbortablePromise(url, cb) {\n      return new Promise((resolve, reject) => {\n        requests[url] = {\n          resolve: resolve,\n          reject: reject,\n          // eslint-disable-next-line standard/no-callback-literal\n          xhr: cb(\n            function(payload) {\n              delete requests[url]\n              resolve(payload)\n            },\n            function(error) {\n              delete requests[url]\n              reject(error)\n            }\n          ),\n        }\n      })\n    }\n\n    function requestService(options) {\n      options = mergeWith(options, moduleOptions)\n\n      if (typeof options.onProgress === 'string') {\n        options.onProgress = context.controller.getSignal(options.onProgress)\n      }\n\n      options.method = options.method.toUpperCase()\n\n      return createAbortablePromise(options.url, (resolve, reject) => {\n        return request(options, createResponse(options, resolve, reject))\n      })\n    }\n\n    if (cachedProvider) {\n      context.http = cachedProvider\n    } else {\n      context.http = cachedProvider = {\n        request: requestService,\n        get(url, passedQuery, options = {}) {\n          const query = passedQuery || options.query\n\n          options.url = query && Object.keys(query).length\n            ? url + '?' + urlEncode(query)\n            : url\n          options.method = 'GET'\n\n          return requestService(options)\n        },\n        post(url, body, options = {}) {\n          options.url = options.query && Object.keys(options.query).length\n            ? url + '?' + urlEncode(options.query)\n            : url\n          options.method = 'POST'\n          options.body = body\n\n          return requestService(options)\n        },\n        put(url, body, options = {}) {\n          options.url = options.query && Object.keys(options.query).length\n            ? url + '?' + urlEncode(options.query)\n            : url\n          options.method = 'PUT'\n          options.body = body\n\n          return requestService(options)\n        },\n        patch(url, body, options = {}) {\n          options.url = options.query && Object.keys(options.query).length\n            ? url + '?' + urlEncode(options.query)\n            : url\n          options.method = 'PATCH'\n          options.body = body\n\n          return requestService(options)\n        },\n        delete(url, query, options = {}) {\n          options.url = options.query && Object.keys(options.query).length\n            ? url + '?' + urlEncode(options.query)\n            : url\n          options.method = 'DELETE'\n\n          return requestService(options)\n        },\n        updateOptions(newOptions) {\n          moduleOptions = mergeWith(newOptions, moduleOptions)\n        },\n        abort(regexp) {\n          const matchingUrls = Object.keys(requests).filter(url => {\n            return Boolean(url.match(new RegExp(regexp)))\n          })\n          matchingUrls.forEach(url => {\n            requests[url].xhr.abort()\n          })\n        },\n        uploadFile(url, files, options = {}) {\n          options.url = moduleOptions.baseUrl + url\n\n          return new FileUpload(options).send(files)\n        },\n      }\n    }\n\n    if (context.debugger) {\n      context.debugger.wrapProvider('http')\n    }\n\n    return context\n  }\n  return HttpProvider\n}\n"]}