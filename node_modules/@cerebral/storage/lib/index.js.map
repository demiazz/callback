{"version":3,"sources":["../src/index.js"],"names":["StorageProvider","options","cachedProvider","json","prefix","createProvider","context","target","sync","controller","on","changes","forEach","Object","keys","change","path","join","indexOf","syncKey","value","getState","setItem","JSON","stringify","get","key","getItem","parse","set","remove","removeItem","storage","debugger","wrapProvider"],"mappings":";;;;;AAAA,SAASA,eAAT,GAAuC;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AACrC,MAAIC,iBAAiB,IAArB;;AAEAD,UAAQE,IAAR,GAAe,UAAUF,OAAV,GAAoBA,QAAQE,IAA5B,GAAmC,IAAlD;AACAF,UAAQG,MAAR,GAAiBH,QAAQG,MAAR,GAAiBH,QAAQG,MAAR,GAAiB,GAAlC,GAAwC,EAAzD;;AAEA,WAASC,cAAT,CAAwBC,OAAxB,EAAiC;AAC/B,QAAMC,SAASN,QAAQM,MAAvB;;AAEA,QAAIN,QAAQO,IAAZ,EAAkB;AAChBF,cAAQG,UAAR,CAAmBC,EAAnB,CAAsB,OAAtB,EAA+B,mBAAW;AACxCC,gBAAQC,OAAR,CAAgB,kBAAU;AACxBC,iBAAOC,IAAP,CAAYb,QAAQO,IAApB,EAA0BI,OAA1B,CAAkC,mBAAW;AAC3C,gBAAIG,OAAOC,IAAP,CAAYC,IAAZ,CAAiB,GAAjB,EAAsBC,OAAtB,CAA8BjB,QAAQO,IAAR,CAAaW,OAAb,CAA9B,MAAyD,CAA7D,EAAgE;AAC9D,kBAAMC,QAAQd,QAAQG,UAAR,CAAmBY,QAAnB,CAA4BpB,QAAQO,IAAR,CAAaW,OAAb,CAA5B,CAAd;;AAEAZ,qBAAOe,OAAP,CACErB,QAAQG,MAAR,GAAiBe,OADnB,EAEElB,QAAQE,IAAR,GAAeoB,KAAKC,SAAL,CAAeJ,KAAf,CAAf,GAAuCA,KAFzC;AAID;AACF,WATD;AAUD,SAXD;AAYD,OAbD;AAcD;;AAED,WAAO;AACLK,SADK,eACDC,GADC,EACI;AACP,YAAMN,QAAQb,OAAOoB,OAAP,CAAe1B,QAAQG,MAAR,GAAiBsB,GAAhC,CAAd;;AAEA,YAAIzB,QAAQE,IAAR,IAAgBiB,KAApB,EAA2B;AACzB,iBAAOG,KAAKK,KAAL,CAAWR,KAAX,CAAP;AACD;;AAED,eAAOA,KAAP;AACD,OATI;AAULS,SAVK,eAUDH,GAVC,EAUIN,KAVJ,EAUW;AACdb,eAAOe,OAAP,CACErB,QAAQG,MAAR,GAAiBsB,GADnB,EAEEzB,QAAQE,IAAR,GAAeoB,KAAKC,SAAL,CAAeJ,KAAf,CAAf,GAAuCA,KAFzC;AAID,OAfI;AAgBLU,YAhBK,kBAgBEJ,GAhBF,EAgBO;AACVnB,eAAOwB,UAAP,CAAkB9B,QAAQG,MAAR,GAAiBsB,GAAnC;AACD;AAlBI,KAAP;AAoBD;;AAED,SAAO,mBAAW;AAChBpB,YAAQ0B,OAAR,GAAkB9B,iBAAiBA,kBAAkBG,eAAeC,OAAf,CAArD;;AAEA,QAAIA,QAAQ2B,QAAZ,EAAsB;AACpB3B,cAAQ2B,QAAR,CAAiBC,YAAjB,CAA8B,SAA9B;AACD;;AAED,WAAO5B,OAAP;AACD,GARD;AASD;;kBAEcN,e","file":"index.js","sourcesContent":["function StorageProvider(options = {}) {\n  let cachedProvider = null\n\n  options.json = 'json' in options ? options.json : true\n  options.prefix = options.prefix ? options.prefix + '.' : ''\n\n  function createProvider(context) {\n    const target = options.target\n\n    if (options.sync) {\n      context.controller.on('flush', changes => {\n        changes.forEach(change => {\n          Object.keys(options.sync).forEach(syncKey => {\n            if (change.path.join('.').indexOf(options.sync[syncKey]) === 0) {\n              const value = context.controller.getState(options.sync[syncKey])\n\n              target.setItem(\n                options.prefix + syncKey,\n                options.json ? JSON.stringify(value) : value\n              )\n            }\n          })\n        })\n      })\n    }\n\n    return {\n      get(key) {\n        const value = target.getItem(options.prefix + key)\n\n        if (options.json && value) {\n          return JSON.parse(value)\n        }\n\n        return value\n      },\n      set(key, value) {\n        target.setItem(\n          options.prefix + key,\n          options.json ? JSON.stringify(value) : value\n        )\n      },\n      remove(key) {\n        target.removeItem(options.prefix + key)\n      },\n    }\n  }\n\n  return context => {\n    context.storage = cachedProvider = cachedProvider || createProvider(context)\n\n    if (context.debugger) {\n      context.debugger.wrapProvider('storage')\n    }\n\n    return context\n  }\n}\n\nexport default StorageProvider\n"]}