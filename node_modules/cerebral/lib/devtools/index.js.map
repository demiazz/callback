{"version":3,"sources":["../../src/devtools/index.js"],"names":["args","Devtools","PLACEHOLDER_INITIAL_MODEL","PLACEHOLDER_DEBUGGING_DATA","storeMutations","preventExternalMutations","preventPropsReplacement","bigComponentsWarning","remoteDebugger","host","reconnect","reconnectInterval","allowedTypes","version","debuggerComponentsMap","debuggerComponentDetailsId","mutations","initialModelString","controller","originalRunTreeFunction","isResettingDebugger","concat","File","FileList","Blob","ImageData","RegExp","sendInitial","bind","sendComponentsMap","index","model","set","JSON","parse","run","console","warn","name","x","length","mutation","data","method","flush","emit","datetime","backlog","ws","WebSocket","event","message","type","path","value","remember","reset","stringify","get","watchExecution","initialModel","source","replace","sendMessage","sendBulkMessage","isConnected","map","render","components","debuggingData","context","functionDetails","payload","mutationString","execution","executionId","id","functionIndex","push","component","_displayName","nextDeps","prevDeps","componentDetails","extractComponentName","renderCount","componentDetailsId","arguments","depsKey","debuggerComponents","splice","componentsToRender","changes","start","end","duration"],"mappings":"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","file":"index.js","sourcesContent":["/* global WebSocket File FileList Blob ImageData VERSION */\nimport { delay } from '../utils'\nimport DevtoolsBase from 'function-tree/lib/devtools/base'\nconst PLACEHOLDER_INITIAL_MODEL = 'PLACEHOLDER_INITIAL_MODEL'\nconst PLACEHOLDER_DEBUGGING_DATA = '$$DEBUGGING_DATA$$'\n\n/*\n  Connects to the Cerebral debugger\n  - Triggers events with information from function tree execution\n  - Stores data related to time travel, if activated\n*/\nexport class Devtools extends DevtoolsBase {\n  constructor(\n    {\n      storeMutations = true,\n      preventExternalMutations = true,\n      preventPropsReplacement = false,\n      bigComponentsWarning = 10,\n      remoteDebugger = null,\n      host = null,\n      reconnect = true,\n      reconnectInterval = 5000,\n      allowedTypes = [],\n    } = {}\n  ) {\n    super({\n      remoteDebugger,\n      host,\n      reconnect,\n      reconnectInterval,\n    })\n    this.version = VERSION\n    this.debuggerComponentsMap = {}\n    this.debuggerComponentDetailsId = 1\n    this.storeMutations = storeMutations\n    this.preventExternalMutations = preventExternalMutations\n    this.preventPropsReplacement = preventPropsReplacement\n    this.bigComponentsWarning = bigComponentsWarning\n\n    this.mutations = []\n    this.initialModelString = null\n    this.controller = null\n    this.originalRunTreeFunction = null\n    this.isResettingDebugger = false\n    this.allowedTypes = []\n      .concat(typeof File === 'undefined' ? [] : File)\n      .concat(typeof FileList === 'undefined' ? [] : FileList)\n      .concat(typeof Blob === 'undefined' ? [] : Blob)\n      .concat(typeof ImageData === 'undefined' ? [] : ImageData)\n      .concat(typeof RegExp === 'undefined' ? [] : RegExp)\n      .concat(allowedTypes || [])\n\n    this.sendInitial = this.sendInitial.bind(this)\n    this.sendComponentsMap = delay(this.sendComponentsMap, 50)\n  }\n  /*\n    To remember state Cerebral stores the initial model as stringified\n    object. Since the model is mutable this is necessary. The debugger\n    passes the execution id of the signal that was double clicked. This\n    execution id is searched backwards in the array of mutations done.\n    This is necessary as multiple mutations can be done on the same execution.\n    Then all mutations are replayed to the model and all the components\n    will be rerendered using the \"flush\" event and \"force\" flag.\n\n    It will also replace the \"run\" method of the controller to\n    prevent any new signals firing off when in \"remember state\"\n  */\n  remember(index) {\n    this.controller.model.set([], JSON.parse(this.initialModelString))\n\n    if (index === 0) {\n      this.controller.run = this.originalRunTreeFunction\n    } else {\n      this.controller.run = name => {\n        console.warn(\n          `The signal \"${name}\" fired while debugger is remembering state, it was ignored`\n        )\n      }\n    }\n\n    for (let x = 0; x < this.mutations.length - index; x++) {\n      const mutation = JSON.parse(this.mutations[x].data)\n      this.controller.model[mutation.method](...mutation.args)\n    }\n\n    this.controller.flush(true)\n    this.controller.emit(\n      'remember',\n      JSON.parse(this.mutations[index].data).datetime\n    )\n  }\n  /*\n\n  */\n  reset() {\n    this.controller.model.set([], JSON.parse(this.initialModelString))\n    this.backlog = []\n    this.mutations = []\n    this.controller.flush(true)\n  }\n  createSocket() {\n    this.ws = new WebSocket(`ws://${this.host}`)\n  }\n  onMessage(event) {\n    const message = JSON.parse(event.data)\n    switch (message.type) {\n      case 'changeModel':\n        this.controller.model.set(message.data.path, message.data.value)\n        this.controller.flush()\n        break\n      case 'remember':\n        if (!this.storeMutations) {\n          console.warn(\n            'Cerebral Devtools - You tried to time travel, but you have turned of storing of mutations'\n          )\n        } else {\n          this.remember(message.data)\n        }\n        break\n      case 'reset':\n        this.reset()\n        break\n      case 'pong':\n        this.sendInitial()\n        break\n      case 'ping':\n        this.sendInitial()\n        break\n    }\n  }\n  /*\n    The debugger might be ready or it might not. The initial communication\n    with the debugger requires a \"ping\" -> \"pong\" to identify that it\n    is ready to receive messages.\n    1. Debugger is open when app loads\n      - Devtools sends \"ping\"\n      - Debugger sends \"pong\"\n      - Devtools sends \"init\"\n    2. Debugger is opened after app load\n      - Debugger sends \"ping\"\n      - Devtools sends \"init\"\n  */\n  init(controller) {\n    this.controller = controller || this.controller\n    this.originalRunTreeFunction = this.controller.run\n\n    if (this.storeMutations) {\n      this.initialModelString = JSON.stringify(this.controller.model.get())\n    }\n\n    super.init()\n\n    if (controller) {\n      this.watchExecution(this.controller, 'c')\n    }\n  }\n  /*\n    Send initial model. If model has already been stringified we reuse it. Any\n    backlogged executions will also be triggered\n  */\n  sendInitial() {\n    const initialModel = this.controller.model.get()\n    const message = JSON.stringify({\n      type: 'init',\n      source: 'c',\n      version: this.version,\n      data: {\n        initialModel: this.initialModelString\n          ? PLACEHOLDER_INITIAL_MODEL\n          : initialModel,\n      },\n    }).replace(`\"${PLACEHOLDER_INITIAL_MODEL}\"`, this.initialModelString)\n\n    this.isResettingDebugger = true\n    this.sendMessage(message)\n    if (this.backlog.length) {\n      this.sendBulkMessage(this.backlog, 'c')\n      this.backlog = []\n    }\n    this.isResettingDebugger = false\n\n    this.isConnected = true\n\n    this.sendMessage(\n      JSON.stringify({\n        type: 'components',\n        source: 'c',\n        version: this.version,\n        data: {\n          map: this.debuggerComponentsMap,\n          render: {\n            components: [],\n          },\n        },\n      })\n    )\n  }\n  /*\n    Create the stringified message for the debugger. As we need to\n    store mutations with the default true \"storeMutations\" option used\n    by time travel and jumping between Cerebral apps, we are careful\n    not doing unnecessary stringifying.\n  */\n  createExecutionMessage(debuggingData, context, functionDetails, payload) {\n    const type = 'execution'\n    let mutationString = ''\n\n    if (\n      this.storeMutations &&\n      debuggingData &&\n      debuggingData.type === 'mutation'\n    ) {\n      mutationString = JSON.stringify(debuggingData)\n    }\n\n    const data = {\n      execution: {\n        executionId: context.execution.id,\n        functionIndex: functionDetails.functionIndex,\n        payload: payload,\n        datetime: context.execution.datetime,\n        data: mutationString ? PLACEHOLDER_DEBUGGING_DATA : debuggingData,\n      },\n    }\n\n    if (mutationString) {\n      this.mutations.push({\n        executionId: context.execution.id,\n        data: mutationString,\n      })\n    }\n\n    return JSON.stringify({\n      type: type,\n      source: 'c',\n      version: this.version,\n      data: data,\n    }).replace(`\"${PLACEHOLDER_DEBUGGING_DATA}\"`, mutationString)\n  }\n  /*\n    The container will listen to \"flush\" events from the controller\n    and send an event to debugger about initial registered components\n  */\n  extractComponentName(component) {\n    return component._displayName.replace('CerebralWrapping_', '')\n  }\n  /*\n    Updates the map the represents what active state paths and\n    components are in your app.Called from Controller. Used by the debugger\n  */\n  updateComponentsMap(component, nextDeps, prevDeps) {\n    const componentDetails = {\n      name: this.extractComponentName(component),\n      renderCount: component.renderCount || 0,\n      id: component.componentDetailsId || this.debuggerComponentDetailsId++,\n    }\n\n    if (arguments.length === 1) {\n      componentDetails.renderCount++\n    }\n\n    component.componentDetailsId = componentDetails.id\n    component.renderCount = componentDetails.renderCount\n\n    if (prevDeps) {\n      for (const depsKey in prevDeps) {\n        const debuggerComponents = this.debuggerComponentsMap[depsKey]\n\n        for (let x = 0; x < debuggerComponents.length; x++) {\n          if (debuggerComponents[x].id === component.componentDetailsId) {\n            debuggerComponents.splice(x, 1)\n            if (debuggerComponents.length === 0) {\n              delete this.debuggerComponentsMap[depsKey]\n            }\n            break\n          }\n        }\n      }\n    }\n\n    if (nextDeps) {\n      for (const depsKey in nextDeps) {\n        this.debuggerComponentsMap[depsKey] = this.debuggerComponentsMap[\n          depsKey\n        ]\n          ? this.debuggerComponentsMap[depsKey].concat(componentDetails)\n          : [componentDetails]\n      }\n    }\n  }\n  /*\n    Sends components map to debugger. It is debounced (check constructor).\n    It needs to wait because React updates async. Instead of tracking\n    callbacks we just wait 50ms as it is not that important when\n    debugger updates\n  */\n  sendComponentsMap(componentsToRender, changes, start, end) {\n    if (this.isConnected) {\n      this.sendMessage(\n        JSON.stringify({\n          type: 'components',\n          source: 'c',\n          version: this.version,\n          data: {\n            map: this.debuggerComponentsMap,\n            render: {\n              start: start,\n              duration: end - start,\n              changes: changes,\n              components: componentsToRender.map(this.extractComponentName),\n            },\n          },\n        })\n      )\n    }\n  }\n}\n\nexport default function(...args) {\n  return new Devtools(...args)\n}\n"]}