'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _Controller2 = require('./Controller');

var _Controller3 = _interopRequireDefault(_Controller2);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var UniversalController = function (_Controller) {
  _inherits(UniversalController, _Controller);

  function UniversalController(controllerOptions) {
    _classCallCheck(this, UniversalController);

    var _this = _possibleConstructorReturn(this, (UniversalController.__proto__ || Object.getPrototypeOf(UniversalController)).call(this, controllerOptions));

    _this.changes = [];
    _this.model.state = JSON.parse(JSON.stringify(_this.model.state));
    _this.trackChanges = _this.trackChanges.bind(_this);
    _this.on('flush', _this.trackChanges);
    _this.hasRun = false;
    return _this;
  }

  _createClass(UniversalController, [{
    key: 'trackChanges',
    value: function trackChanges(changes) {
      this.changes = this.changes.concat(changes);
    }
  }, {
    key: 'getScript',
    value: function getScript() {
      var _this2 = this;

      var state = JSON.stringify(this.changes.reduce(function (changes, change) {
        changes[change.path.join('.')] = _this2.getState(change.path);

        return changes;
      }, {}));

      return '<script>window.CEREBRAL_STATE = ' + state + '</script>';
    }
  }, {
    key: 'run',
    value: function run(sequence, payload) {
      if (this.hasRun) {
        (0, _utils.throwError)('You can not run the universal controller more than once, create a new one');
      }
      this.hasRun = true;

      return _get(UniversalController.prototype.__proto__ || Object.getPrototypeOf(UniversalController.prototype), 'run', this).call(this, 'UniversalController.run', sequence, payload);
    }
  }]);

  return UniversalController;
}(_Controller3.default);

exports.default = UniversalController;
//# sourceMappingURL=UniversalController.js.map