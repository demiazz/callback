{"version":3,"sources":["../../src/operators/increment.js"],"names":["target","value","increment","state","props","resolve","isTag","Error","resolvedValue","Number","isInteger","invalidStateMsg","type","targetPath","path","toIncrement","get","incremented","set","result","Object","assign","parts","split","key","pop","targetObj","reduce","displayName","String"],"mappings":";;;;;;kBAAe,UAASA,MAAT,EAA4B;AAAA,MAAXC,KAAW,uEAAH,CAAG;;AACzC,WAASC,SAAT,OAA8C;AAAA,QAAzBC,KAAyB,QAAzBA,KAAyB;AAAA,QAAlBC,KAAkB,QAAlBA,KAAkB;AAAA,QAAXC,OAAW,QAAXA,OAAW;;AAC5C,QAAI,CAACA,QAAQC,KAAR,CAAcN,MAAd,EAAsB,OAAtB,EAA+B,OAA/B,CAAL,EAA8C;AAC5C,YAAM,IAAIO,KAAJ,CACJ,uFADI,CAAN;AAGD;;AAED,QAAIC,gBAAgBH,QAAQJ,KAAR,CAAcA,KAAd,CAApB;;AAEA,QAAI,CAACQ,OAAOC,SAAP,CAAiBF,aAAjB,CAAL,EAAsC;AACpC,YAAM,IAAID,KAAJ,CACJ,mEADI,CAAN;AAGD;;AAED,QAAMI,kBACJ,gEADF;AAEA,QAAIX,OAAOY,IAAP,KAAgB,OAApB,EAA6B;AAC3B,UAAMC,aAAaR,QAAQS,IAAR,CAAad,MAAb,CAAnB;AACA,UAAMe,cAAcZ,MAAMa,GAAN,CAAUH,UAAV,CAApB;;AAEA,UAAI,CAACJ,OAAOC,SAAP,CAAiBK,WAAjB,CAAL,EAAoC;AAClC,cAAM,IAAIR,KAAJ,CAAUI,eAAV,CAAN;AACD;;AAED,UAAMM,cAAcF,cAAcP,aAAlC;AACAL,YAAMe,GAAN,CAAUL,UAAV,EAAsBI,WAAtB;AACD,KAVD,MAUO;AACL,UAAME,SAASC,OAAOC,MAAP,CAAc,EAAd,EAAkBjB,KAAlB,CAAf;AACA,UAAMkB,QAAQjB,QAAQS,IAAR,CAAad,MAAb,EAAqBuB,KAArB,CAA2B,GAA3B,CAAd;AACA,UAAMC,MAAMF,MAAMG,GAAN,EAAZ;AACA,UAAMC,YAAYJ,MAAMK,MAAN,CAAa,UAAC3B,MAAD,EAASwB,GAAT,EAAiB;AAC9C,eAAQxB,OAAOwB,GAAP,IAAcJ,OAAOC,MAAP,CAAc,EAAd,EAAkBrB,OAAOwB,GAAP,KAAe,EAAjC,CAAtB;AACD,OAFiB,EAEfL,MAFe,CAAlB;;AAIA,UAAI,CAACV,OAAOC,SAAP,CAAiBgB,UAAUF,GAAV,CAAjB,CAAL,EAAuC;AACrC,cAAM,IAAIjB,KAAJ,CAAUI,eAAV,CAAN;AACD;;AAEDe,gBAAUF,GAAV,KAAkBhB,aAAlB;;AAEA,aAAOW,MAAP;AACD;AACF;;AAEDjB,YAAU0B,WAAV,2BAA8CC,OAAO7B,MAAP,CAA9C,UAAiE6B,OAAO5B,KAAP,CAAjE;;AAEA,SAAOC,SAAP;AACD,C","file":"increment.js","sourcesContent":["export default function(target, value = 1) {\n  function increment({ state, props, resolve }) {\n    if (!resolve.isTag(target, 'state', 'props')) {\n      throw new Error(\n        'Cerebral operator.increment: You have to use the STATE or PROPS TAG as first argument'\n      )\n    }\n\n    let resolvedValue = resolve.value(value)\n\n    if (!Number.isInteger(resolvedValue)) {\n      throw new Error(\n        'Cerebral operator.increment: You must increment by integer values'\n      )\n    }\n\n    const invalidStateMsg =\n      'Cerebral operator.increment: You must increment integer values'\n    if (target.type === 'state') {\n      const targetPath = resolve.path(target)\n      const toIncrement = state.get(targetPath)\n\n      if (!Number.isInteger(toIncrement)) {\n        throw new Error(invalidStateMsg)\n      }\n\n      const incremented = toIncrement + resolvedValue\n      state.set(targetPath, incremented)\n    } else {\n      const result = Object.assign({}, props)\n      const parts = resolve.path(target).split('.')\n      const key = parts.pop()\n      const targetObj = parts.reduce((target, key) => {\n        return (target[key] = Object.assign({}, target[key] || {}))\n      }, result)\n\n      if (!Number.isInteger(targetObj[key])) {\n        throw new Error(invalidStateMsg)\n      }\n\n      targetObj[key] += resolvedValue\n\n      return result\n    }\n  }\n\n  increment.displayName = `operator.increment(${String(target)}, ${String(value)})`\n\n  return increment\n}\n"]}