{"version":3,"sources":["../../src/providers/State.js"],"names":["StateProviderFactory","methods","provider","createProvider","context","model","controller","asyncTimeout","reduce","currentStateContext","methodKey","args","path","shift","clearTimeout","setTimeout","flush","apply","concat","StateProvider","functionDetails","state","debugger","currentState","originFunc","argsCopy","slice","send","datetime","Date","now","type","color","method","e","signalName","execution","name","message"],"mappings":";;;;;;AAAA;;;;AAEA,SAASA,oBAAT,GAAgC;AAC9B,MAAMC,UAAU,CACd,KADc,EAEd,KAFc,EAGd,QAHc,EAId,MAJc,EAKd,OALc,EAMd,KANc,EAOd,OAPc,EAQd,SARc,EASd,QATc,EAUd,OAVc,EAWd,QAXc,CAAhB;AAaA,MAAIC,WAAW,IAAf;;AAEA,WAASC,cAAT,CAAwBC,OAAxB,EAAiC;AAC/B,QAAMC,QAAQD,QAAQE,UAAR,CAAmBD,KAAjC;AACA,QAAIE,eAAe,IAAnB;;AAEA,WAAON,QAAQO,MAAR,CAAe,UAACC,mBAAD,EAAsBC,SAAtB,EAAoC;AACxDD,0BAAoBC,SAApB,IAAiC,YAAa;AAAA,0CAATC,IAAS;AAATA,cAAS;AAAA;;AAC5C,YAAMC,OAAO,uBAAW,sBAAUD,KAAKE,KAAL,EAAV,CAAX,CAAb;;AAEA,YAAIH,cAAc,KAAlB,EAAyB;AACvBI,uBAAaP,YAAb;AACAA,yBAAeQ,WAAW;AAAA,mBAAMX,QAAQE,UAAR,CAAmBU,KAAnB,EAAN;AAAA,WAAX,CAAf;AACD;;AAED,eAAOX,MAAMK,SAAN,EAAiBO,KAAjB,CAAuBZ,KAAvB,EAA8B,CAACO,IAAD,EAAOM,MAAP,CAAcP,IAAd,CAA9B,CAAP;AACD,OATD;;AAWA,aAAOF,mBAAP;AACD,KAbM,EAaJ,EAbI,CAAP;AAcD;;AAED,WAASU,aAAT,CAAuBf,OAAvB,EAAgCgB,eAAhC,EAAiD;AAC/ChB,YAAQiB,KAAR,GAAgBnB,WAAWA,YAAYC,eAAeC,OAAf,CAAvC;;AAEA,QAAIA,QAAQkB,QAAZ,EAAsB;AACpBlB,cAAQiB,KAAR,GAAgBpB,QAAQO,MAAR,CAAe,UAACe,YAAD,EAAeb,SAAf,EAA6B;AAC1D,YAAIA,cAAc,KAAd,IAAuBA,cAAc,SAAzC,EAAoD;AAClDa,uBAAab,SAAb,IAA0BR,SAASQ,SAAT,CAA1B;AACD,SAFD,MAEO;AACL,cAAMc,aAAatB,SAASQ,SAAT,CAAnB;;AAEAa,uBAAab,SAAb,IAA0B,YAAa;AAAA,+CAATC,IAAS;AAATA,kBAAS;AAAA;;AACrC,gBAAMc,WAAWd,KAAKe,KAAL,EAAjB;AACA,gBAAMd,OAAO,uBAAWa,SAASZ,KAAT,EAAX,CAAb;;AAEAT,oBAAQkB,QAAR,CAAiBK,IAAjB,CAAsB;AACpBC,wBAAUC,KAAKC,GAAL,EADU;AAEpBC,oBAAM,UAFc;AAGpBC,qBAAO,MAHa;AAIpBC,sBAAQvB,SAJY;AAKpBC,qBAAOC,IAAP,4BAAgBa,QAAhB;AALoB,aAAtB;;AAQA,gBAAI;AACFD,yBAAWP,KAAX,CAAiBb,QAAQE,UAAR,CAAmBD,KAApC,EAA2CM,IAA3C;AACD,aAFD,CAEE,OAAOuB,CAAP,EAAU;AACV,kBAAMC,aAAa/B,QAAQgC,SAAR,CAAkBC,IAArC;AACA,sDACiBF,UADjB,uBAC6Cf,gBAAgBiB,IAD7D,wBACoFH,EAAEI,OADtF;AAGD;AACF,WApBD;AAqBD;;AAED,eAAOf,YAAP;AACD,OA9Be,EA8Bb,EA9Ba,CAAhB;AA+BD;;AAED,WAAOnB,OAAP;AACD;;AAED,SAAOe,aAAP;AACD;;kBAEcnB,oB","file":"State.js","sourcesContent":["import { ensurePath, cleanPath, throwError } from '../utils'\n\nfunction StateProviderFactory() {\n  const methods = [\n    'get',\n    'set',\n    'toggle',\n    'push',\n    'merge',\n    'pop',\n    'shift',\n    'unshift',\n    'splice',\n    'unset',\n    'concat',\n  ]\n  let provider = null\n\n  function createProvider(context) {\n    const model = context.controller.model\n    let asyncTimeout = null\n\n    return methods.reduce((currentStateContext, methodKey) => {\n      currentStateContext[methodKey] = (...args) => {\n        const path = ensurePath(cleanPath(args.shift()))\n\n        if (methodKey !== 'get') {\n          clearTimeout(asyncTimeout)\n          asyncTimeout = setTimeout(() => context.controller.flush())\n        }\n\n        return model[methodKey].apply(model, [path].concat(args))\n      }\n\n      return currentStateContext\n    }, {})\n  }\n\n  function StateProvider(context, functionDetails) {\n    context.state = provider = provider || createProvider(context)\n\n    if (context.debugger) {\n      context.state = methods.reduce((currentState, methodKey) => {\n        if (methodKey === 'get' || methodKey === 'compute') {\n          currentState[methodKey] = provider[methodKey]\n        } else {\n          const originFunc = provider[methodKey]\n\n          currentState[methodKey] = (...args) => {\n            const argsCopy = args.slice()\n            const path = ensurePath(argsCopy.shift())\n\n            context.debugger.send({\n              datetime: Date.now(),\n              type: 'mutation',\n              color: '#333',\n              method: methodKey,\n              args: [path, ...argsCopy],\n            })\n\n            try {\n              originFunc.apply(context.controller.model, args)\n            } catch (e) {\n              const signalName = context.execution.name\n              throwError(\n                `The Signal \"${signalName}\" with action \"${functionDetails.name}\" has an error: ${e.message}`\n              )\n            }\n          }\n        }\n\n        return currentState\n      }, {})\n    }\n\n    return context\n  }\n\n  return StateProvider\n}\n\nexport default StateProviderFactory\n"]}