'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
function DebuggerProviderFactory() {
  function DebuggerProvider(context, functionDetails, payload, prevPayload) {
    var devtools = context.controller.devtools;

    if (devtools.preventPropsReplacement) {
      Object.keys(payload).forEach(function (key) {
        if (prevPayload && key in prevPayload && prevPayload[key] !== payload[key]) {
          throw new Error('Cerebral Devtools - You have activated the "preventPropsReplacement" option and in signal "' + context.execution.name + '", before the action "' + functionDetails.name + '", the key "' + key + '" was replaced');
        }
      });
    }

    context.debugger = {
      send: function send(debuggerData) {
        devtools.sendExecutionData(debuggerData, context, functionDetails, payload);
      },
      wrapProvider: function wrapProvider(providerKey) {
        var provider = context[providerKey];

        context[providerKey] = Object.keys(provider).reduce(function (wrappedProvider, key) {
          var originalFunc = provider[key];

          wrappedProvider[key] = function () {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            context.debugger.send({
              method: providerKey + '.' + key,
              args: args
            });

            return originalFunc.apply(provider, args);
          };

          return wrappedProvider;
        }, typeof provider === 'function' ? function () {
          for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          context.debugger.send({
            method: '' + providerKey,
            args: args
          });

          return provider.apply(provider, args);
        } : {});
      }
    };

    return context;
  }

  return DebuggerProvider;
}

exports.default = DebuggerProviderFactory;
//# sourceMappingURL=Debugger.js.map