{"version":3,"sources":["../../../src/views/angularjs/module.js"],"names":["CerebralScope","ctrl","scope","dependencies","controller","onUpdate","bind","$onInit","props","Object","assign","view","mergeProps","displayName","onMount","$onDestroy","onUnMount","$onChanges","keys","changesObj","reduce","updates","key","oldProps","previousValue","nextProps","currentValue","hasUpdate","onPropsUpdate","getProps","safeApply","fn","phase","$root","$$phase","$apply","stateChanges","force","updateFromState","angular","module","provider","config","configure","controllerConfig","$get","$injector","providers","concat","services","map","service","get","connect","depdendencies"],"mappings":"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","file":"module.js","sourcesContent":["import { Controller, provide } from '../../'\nimport View from '../View'\n\nclass CerebralScope {\n  constructor(ctrl, scope, dependencies, controller) {\n    this.ctrl = ctrl\n    this.scope = scope\n    this.onUpdate = this.onUpdate.bind(this)\n    this.ctrl.$onInit = () => {\n      this.props = Object.assign({}, this.ctrl)\n\n      this.view = new View({\n        dependencies,\n        mergeProps: null,\n        props: this.props,\n        controller,\n        displayName: 'Unknown',\n        onUpdate: this.onUpdate,\n      })\n      this.view.onMount()\n      this.ctrl.$onDestroy = () => {\n        this.view.onUnMount()\n        delete this.ctrl\n        delete this.scope\n      }\n      this.ctrl.$onChanges = changesObj => {\n        const { oldProps, nextProps } = Object.keys(changesObj).reduce(\n          (updates, key) => {\n            updates.oldProps[key] = changesObj[key].previousValue\n            updates.nextProps[key] = changesObj[key].currentValue\n\n            return updates\n          },\n          { oldProps: {}, nextProps: {} }\n        )\n        const hasUpdate = this.view.onPropsUpdate(oldProps, nextProps)\n\n        if (hasUpdate) {\n          Object.assign(this.ctrl, this.view.getProps(nextProps))\n          this.scope.safeApply()\n        }\n      }\n      this.scope.safeApply = function(fn) {\n        var phase = this.$root.$$phase\n        if (phase === '$apply' || phase === '$digest') {\n          if (fn && typeof fn === 'function') {\n            fn()\n          }\n        } else {\n          this.$apply(fn)\n        }\n      }\n      Object.assign(this.ctrl, this.view.getProps(this.props))\n    }\n  }\n  onUpdate(stateChanges, force) {\n    this.view.updateFromState(stateChanges, this.props, force)\n    Object.assign(this.ctrl, this.view.getProps(this.props))\n    this.scope.safeApply()\n  }\n}\n\nexport default angular => {\n  angular.module('cerebral', []).provider('cerebral', function() {\n    let config = null\n\n    this.configure = function(controllerConfig) {\n      config = controllerConfig\n    }\n\n    this.$get = [\n      '$injector',\n      function($injector) {\n        config.providers = (config.providers || []).concat(\n          (config.services || []).map(service => {\n            return provide(service, $injector.get(service))\n          })\n        )\n        const controller = new Controller(config)\n\n        return {\n          connect(ctrl, scope, depdendencies) {\n            return new CerebralScope(ctrl, scope, depdendencies, controller)\n          },\n        }\n      },\n    ]\n  })\n}\n"]}