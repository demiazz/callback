{"version":3,"sources":["../../../src/views/preact/Hoc.js"],"names":["HOC","BaseComponent","dependencies","mergeProps","props","controller","name","onUpdate","bind","view","displayName","onMount","nextProps","hasUpdate","onPropsUpdate","forceUpdate","_isUnmounting","onUnMount","stateChanges","force","updateFromState","Component","CerebralComponent","context","_displayName","getProps"],"mappings":";;;;;;;;kBAgEwBA,G;;AAhExB;;AACA;;AACA;;;;;;;;;;;;IAEMC,a;;;AACJ,yBAAYC,YAAZ,EAA0BC,UAA1B,EAAsCC,KAAtC,EAA6CC,UAA7C,EAAyDC,IAAzD,EAA+D;AAAA;;AAAA,8HACvDF,KADuD;;AAE7D,QAAI,CAACC,UAAL,EAAiB;AACf,6BACE,wIADF;AAGD;;AAED,UAAKE,QAAL,GAAgB,MAAKA,QAAL,CAAcC,IAAd,OAAhB;AACA,UAAKC,IAAL,GAAY,mBAAS;AACnBP,gCADmB;AAEnBC,4BAFmB;AAGnBC,kBAHmB;AAInBC,4BAJmB;AAKnBK,mBAAaJ,IALM;AAMnBC,gBAAU,MAAKA;AANI,KAAT,CAAZ;AAT6D;AAiB9D;AACD;;;;;;;;yCAIqB;AACnB,WAAKE,IAAL,CAAUE,OAAV;AACD;AACD;;;;;;;4CAIwB;AACtB,aAAO,KAAP;AACD;AACD;;;;;;;;8CAK0BC,S,EAAW;AACnC,UAAMC,YAAY,KAAKJ,IAAL,CAAUK,aAAV,CAAwB,KAAKV,KAA7B,EAAoCQ,SAApC,CAAlB;AACA,UAAIC,SAAJ,EAAe;AACb,aAAKE,WAAL;AACD;AACF;AACD;;;;;;2CAGuB;AACrB,WAAKC,aAAL,GAAqB,IAArB;AACA,WAAKP,IAAL,CAAUQ,SAAV;AACD;;;6BACQC,Y,EAAcC,K,EAAO;AAC5B,UAAI,KAAKH,aAAT,EAAwB;AACtB;AACD;AACD,WAAKP,IAAL,CAAUW,eAAV,CAA0BF,YAA1B,EAAwC,KAAKd,KAA7C,EAAoDe,KAApD;AACA,WAAKJ,WAAL;AACD;;;;;;AAGY,SAASf,GAAT,CAAaE,YAAb,EAA2BC,UAA3B,EAAuCkB,SAAvC,EAAkD;AAC/D,MAAI,OAAOnB,YAAP,KAAwB,UAA5B,EAAwC;AACtC,2BACE,mIADF;AAGD;;AAED,MAAI,CAACA,YAAL,EAAmB;AACjB,2BACE,oEADF;AAGD;;AAX8D,MAazDoB,iBAbyD;AAAA;;AAc7D,+BAAYlB,KAAZ,EAAmBmB,OAAnB,EAA4B;AAAA;;AAAA,mIAExBrB,YAFwB,EAGxBC,UAHwB,EAIxBC,KAJwB,EAKxBmB,QAAQlB,UALgB,EAMxBgB,UAAUX,WAAV,IAAyBW,UAAUf,IANX;AAQ3B;;AAtB4D;AAAA;AAAA,+BAuBpD;AACP,eAAO,KAAKG,IAAL,CAAUe,YAAjB;AACD;AAzB4D;AAAA;AAAA,6BA0BtDpB,KA1BsD,EA0B/C;AACZ,eAAO,eAAciB,SAAd,EAAyB,KAAKZ,IAAL,CAAUgB,QAAV,CAAmBrB,KAAnB,CAAzB,CAAP;AACD;AA5B4D;;AAAA;AAAA,IAa/BH,aAb+B;;AA8B/DqB,oBAAkBZ,WAAlB,0BAAoDW,UAAUX,WAAV,IAAyBW,UAAUf,IAAvF;;AAEA,SAAOgB,iBAAP;AACD","file":"Hoc.js","sourcesContent":["import { h as createElement, Component } from 'preact'\nimport { throwError } from '../../utils'\nimport View from '../View'\n\nclass BaseComponent extends Component {\n  constructor(dependencies, mergeProps, props, controller, name) {\n    super(props)\n    if (!controller) {\n      throwError(\n        'Can not find controller, did you remember to use the Container component? Read more at: https://cerebral.github.io/api/05_connect.html'\n      )\n    }\n\n    this.onUpdate = this.onUpdate.bind(this)\n    this.view = new View({\n      dependencies,\n      mergeProps,\n      props,\n      controller,\n      displayName: name,\n      onUpdate: this.onUpdate,\n    })\n  }\n  /*\n    Register the component to the dependency store with its\n    state tracker and tags state dependencies\n  */\n  componentWillMount() {\n    this.view.onMount()\n  }\n  /*\n    We only allow forced render by change of props passed\n    or Container tells it to render\n  */\n  shouldComponentUpdate() {\n    return false\n  }\n  /*\n    If received props differ, we need to update any\n    StateTrackers and tags, cause they might be using\n    props to define a state dependency\n  */\n  componentWillReceiveProps(nextProps) {\n    const hasUpdate = this.view.onPropsUpdate(this.props, nextProps)\n    if (hasUpdate) {\n      this.forceUpdate()\n    }\n  }\n  /*\n    Unregister with existing state dependencies\n  */\n  componentWillUnmount() {\n    this._isUnmounting = true\n    this.view.onUnMount()\n  }\n  onUpdate(stateChanges, force) {\n    if (this._isUnmounting) {\n      return\n    }\n    this.view.updateFromState(stateChanges, this.props, force)\n    this.forceUpdate()\n  }\n}\n\nexport default function HOC(dependencies, mergeProps, Component) {\n  if (typeof dependencies === 'function') {\n    throwError(\n      'You can not use a function to define dependencies. Use tags or a function on the specific property you want to dynamically create'\n    )\n  }\n\n  if (!dependencies) {\n    throwError(\n      'There is no reason to connect a component that has no dependencies'\n    )\n  }\n\n  class CerebralComponent extends BaseComponent {\n    constructor(props, context) {\n      super(\n        dependencies,\n        mergeProps,\n        props,\n        context.controller,\n        Component.displayName || Component.name\n      )\n    }\n    toJSON() {\n      return this.view._displayName\n    }\n    render(props) {\n      return createElement(Component, this.view.getProps(props))\n    }\n  }\n  CerebralComponent.displayName = `CerebralWrapping_${Component.displayName || Component.name}`\n\n  return CerebralComponent\n}\n"]}