'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = HOC;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _utils = require('../../utils');

var _View = require('../View');

var _View2 = _interopRequireDefault(_View);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BaseComponent = function (_React$Component) {
  _inherits(BaseComponent, _React$Component);

  function BaseComponent(dependencies, mergeProps, props, controller, name) {
    _classCallCheck(this, BaseComponent);

    var _this = _possibleConstructorReturn(this, (BaseComponent.__proto__ || Object.getPrototypeOf(BaseComponent)).call(this, props));

    if (!controller) {
      (0, _utils.throwError)('Can not find controller, did you remember to use the Container component? Read more at: https://cerebral.github.io/api/05_connect.html');
    }

    _this.onUpdate = _this.onUpdate.bind(_this);
    _this.view = new _View2.default({
      dependencies: dependencies,
      mergeProps: mergeProps,
      props: props,
      controller: controller,
      displayName: name,
      onUpdate: _this.onUpdate
    });
    return _this;
  }
  /*
    Register the component to the dependency store with its
    state tracker and tags state dependencies
  */


  _createClass(BaseComponent, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.view.onMount();
    }
    /*
      We only allow forced render by change of props passed
      or Container tells it to render
    */

  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate() {
      return false;
    }
    /*
      If received props differ, we need to update any
      StateTrackers and tags, cause they might be using
      props to define a state dependency
    */

  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var hasUpdate = this.view.onPropsUpdate(this.props, nextProps);
      if (hasUpdate) {
        this.forceUpdate();
      }
    }
    /*
      Unregister with existing state dependencies
    */

  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._isUnmounting = true;
      this.view.onUnMount();
    }
  }, {
    key: 'onUpdate',
    value: function onUpdate(stateChanges, force) {
      if (this._isUnmounting) {
        return;
      }
      this.view.updateFromState(stateChanges, this.props, force);
      this.forceUpdate();
    }
  }]);

  return BaseComponent;
}(_react2.default.Component);

function HOC(dependencies, mergeProps, Component) {
  if (typeof dependencies === 'function') {
    (0, _utils.throwError)('You can not use a function to define dependencies. Use tags or a function on the specific property you want to dynamically create');
  }

  if (!dependencies) {
    (0, _utils.throwError)('There is no reason to connect a component that has no dependencies');
  }

  var CerebralComponent = function (_BaseComponent) {
    _inherits(CerebralComponent, _BaseComponent);

    function CerebralComponent(props, context) {
      _classCallCheck(this, CerebralComponent);

      return _possibleConstructorReturn(this, (CerebralComponent.__proto__ || Object.getPrototypeOf(CerebralComponent)).call(this, dependencies, mergeProps, props, context.controller, Component.displayName || Component.name));
    }

    _createClass(CerebralComponent, [{
      key: 'toJSON',
      value: function toJSON() {
        return this.view._displayName;
      }
    }, {
      key: 'render',
      value: function render() {
        return _react2.default.createElement(Component, this.view.getProps(this.props));
      }
    }]);

    return CerebralComponent;
  }(BaseComponent);

  CerebralComponent.displayName = 'CerebralWrapping_' + (Component.displayName || Component.name);

  CerebralComponent.contextTypes = {
    controller: _propTypes2.default.object
  };

  return CerebralComponent;
}
//# sourceMappingURL=Hoc.js.map