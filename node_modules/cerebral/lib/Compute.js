'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Compute = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = compute;

var _Tag = require('./tags/Tag');

var _Tag2 = _interopRequireDefault(_Tag);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Compute = exports.Compute = function () {
  function Compute(args) {
    _classCallCheck(this, Compute);

    this.args = args;
    this.value = null;
  }

  _createClass(Compute, [{
    key: 'getValue',
    value: function getValue(get) {
      var computeGet = function computeGet(tag) {
        return tag.getValue(get);
      };
      var result = this.args.reduce(function (details, arg, index) {
        if (arg instanceof Compute) {
          details.results.push(arg.getValue(get));

          return details;
        } else if (arg instanceof _Tag2.default) {
          var path = arg.getPath(get);

          if (path.indexOf('.*') > 0) {
            var value = arg.getValue(get);

            details.results.push(value ? Object.keys(value) : []);
          } else {
            details.results.push(arg.getValue(get));
          }

          return details;
        } else if (typeof arg === 'function') {
          details.results.push(arg.apply(undefined, _toConsumableArray(details.results.slice(details.previousFuncIndex, index)).concat([computeGet])));
          details.previousFuncIndex = index;

          return details;
        }

        details.results.push(arg);

        return details;
      }, {
        results: [],
        previousFuncIndex: 0
      });

      return result.results[result.results.length - 1];
    }
  }]);

  return Compute;
}();

function compute() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return new Compute(args);
}
//# sourceMappingURL=Compute.js.map