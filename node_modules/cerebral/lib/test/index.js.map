{"version":3,"sources":["../../src/test/index.js"],"names":["runCompute","CerebralTest","RunSignal","runAction","compute","fixtures","response","controller","state","signals","test","resolve","value","props","getSignal","runSignal","signal","options","Promise","reject","recordActions","isSignal","Array","isArray","Object","assign","actionStart","execution","funcDetails","payload","singleAction","noDuplicateWarnings","console","warn","actionEnd","result","output","error","err","off","signalEnd","getState","on","model","getModel","setState","path","set","flush","get","log","action"],"mappings":"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","file":"index.js","sourcesContent":["import Path from 'function-tree/lib/Path'\nimport { Primitive } from 'function-tree/lib/primitives'\nimport { Controller } from '..'\nimport { ensurePath, cleanPath } from '../utils'\n\nexport function runCompute(compute, fixtures = {}) {\n  let response\n  const controller = Controller({\n    state: fixtures.state || {},\n    signals: {\n      test: [\n        ({ resolve }) => {\n          response = resolve.value(compute, fixtures.props)\n        },\n      ],\n    },\n  })\n  controller.getSignal('test')(fixtures.props)\n  return response\n}\n\nexport function runSignal(signal, fixtures = {}, options = {}) {\n  return new Promise((resolve, reject) => {\n    const recordActions = options.recordActions &&\n      options.recordActions === 'byName'\n      ? 'name'\n      : 'functionIndex'\n    const isSignal = Array.isArray(signal) || signal instanceof Primitive\n    const controller =\n      options.controller ||\n      Controller(\n        Object.assign({}, fixtures, isSignal && { signals: { signal } })\n      )\n    const response = { controller }\n\n    const actionStart = function(execution, funcDetails, payload) {\n      if (options.singleAction) {\n        response.props = payload\n      } else {\n        if (\n          !options.noDuplicateWarnings &&\n          response[funcDetails[recordActions]]\n        ) {\n          console.warn(\n            `Cerebral[runSignal]: signal contains actions with duplicate names ('${funcDetails[recordActions]}')`\n          )\n        }\n        response[funcDetails[recordActions]] = { props: payload }\n      }\n    }\n\n    const actionEnd = function(execution, funcDetails, payload, result) {\n      if (!result || (result instanceof Path && !result.payload)) {\n        return\n      }\n      if (options.singleAction || response[funcDetails[recordActions]]) {\n        const output = result instanceof Path ? result.payload : result\n        if (options.singleAction) {\n          response.output = output\n        } else {\n          response[funcDetails[recordActions]].output = output\n        }\n      }\n    }\n\n    const error = function(err) {\n      off()\n      reject(err)\n    }\n\n    const signalEnd = () => {\n      off()\n      response.state = controller.getState()\n      resolve(response)\n    }\n\n    const off = function() {\n      controller.off('functionStart', actionStart)\n      controller.off('functionEnd', actionEnd)\n      controller.off('error', error)\n      controller.off('end', signalEnd)\n    }\n\n    controller.on('functionStart', actionStart)\n    controller.on('functionEnd', actionEnd)\n    controller.on('error', error)\n    controller.on('end', signalEnd)\n    controller.getSignal(isSignal ? 'signal' : signal)(fixtures.props)\n  })\n}\n\nexport function CerebralTest(fixtures = {}, options = {}) {\n  const controller = Controller(Object.assign({}, fixtures))\n  const model = controller.getModel()\n  return {\n    runSignal(signal, props) {\n      return runSignal(\n        signal,\n        { props },\n        Object.assign({}, options, { controller, noDuplicateWarnings: true })\n      )\n    },\n    setState(path, value) {\n      model.set(ensurePath(cleanPath(path)), value)\n      model.flush()\n    },\n    getState(path) {\n      return model.get(ensurePath(cleanPath(path)))\n    },\n  }\n}\n\nexport function RunSignal(fixtures = {}, options = {}) {\n  console.log('RunSignal test helper is deprecated, please use CerebralTest')\n  return CerebralTest(fixtures, options).runSignal\n}\n\nexport function runAction(action, fixtures = {}) {\n  return runSignal([action], fixtures, {\n    recordActions: true,\n    singleAction: true,\n  })\n}\n"]}