'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runSignal = undefined;
exports.runCompute = runCompute;
exports.CerebralTest = CerebralTest;
exports.RunSignal = RunSignal;
exports.runAction = runAction;

var _Path = require('function-tree/lib/Path');

var _Path2 = _interopRequireDefault(_Path);

var _primitives = require('function-tree/lib/primitives');

var _ = require('..');

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function runCompute(compute) {
  var fixtures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var response = void 0;
  var controller = (0, _.Controller)({
    state: fixtures.state || {},
    signals: {
      test: [function (_ref) {
        var resolve = _ref.resolve;

        response = resolve.value(compute, fixtures.props);
      }]
    }
  });
  controller.getSignal('test')(fixtures.props);
  return response;
}

function _runSignal(signal) {
  var fixtures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  return new Promise(function (resolve, reject) {
    var recordActions = options.recordActions && options.recordActions === 'byName' ? 'name' : 'functionIndex';
    var isSignal = Array.isArray(signal) || signal instanceof _primitives.Primitive;
    var controller = options.controller || (0, _.Controller)(Object.assign({}, fixtures, isSignal && { signals: { signal: signal } }));
    var response = { controller: controller };

    var actionStart = function actionStart(execution, funcDetails, payload) {
      if (options.singleAction) {
        response.props = payload;
      } else {
        if (!options.noDuplicateWarnings && response[funcDetails[recordActions]]) {
          console.warn('Cerebral[runSignal]: signal contains actions with duplicate names (\'' + funcDetails[recordActions] + '\')');
        }
        response[funcDetails[recordActions]] = { props: payload };
      }
    };

    var actionEnd = function actionEnd(execution, funcDetails, payload, result) {
      if (!result || result instanceof _Path2.default && !result.payload) {
        return;
      }
      if (options.singleAction || response[funcDetails[recordActions]]) {
        var output = result instanceof _Path2.default ? result.payload : result;
        if (options.singleAction) {
          response.output = output;
        } else {
          response[funcDetails[recordActions]].output = output;
        }
      }
    };

    var error = function error(err) {
      off();
      reject(err);
    };

    var signalEnd = function signalEnd() {
      off();
      response.state = controller.getState();
      resolve(response);
    };

    var off = function off() {
      controller.off('functionStart', actionStart);
      controller.off('functionEnd', actionEnd);
      controller.off('error', error);
      controller.off('end', signalEnd);
    };

    controller.on('functionStart', actionStart);
    controller.on('functionEnd', actionEnd);
    controller.on('error', error);
    controller.on('end', signalEnd);
    controller.getSignal(isSignal ? 'signal' : signal)(fixtures.props);
  });
}

exports.runSignal = _runSignal;
function CerebralTest() {
  var fixtures = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var controller = (0, _.Controller)(Object.assign({}, fixtures));
  var model = controller.getModel();
  return {
    runSignal: function runSignal(signal, props) {
      return _runSignal(signal, { props: props }, Object.assign({}, options, { controller: controller, noDuplicateWarnings: true }));
    },
    setState: function setState(path, value) {
      model.set((0, _utils.ensurePath)((0, _utils.cleanPath)(path)), value);
      model.flush();
    },
    getState: function getState(path) {
      return model.get((0, _utils.ensurePath)((0, _utils.cleanPath)(path)));
    }
  };
}

function RunSignal() {
  var fixtures = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  console.log('RunSignal test helper is deprecated, please use CerebralTest');
  return CerebralTest(fixtures, options).runSignal;
}

function runAction(action) {
  var fixtures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return _runSignal([action], fixtures, {
    recordActions: true,
    singleAction: true
  });
}
//# sourceMappingURL=index.js.map