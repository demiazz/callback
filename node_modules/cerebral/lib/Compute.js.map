{"version":3,"sources":["../src/Compute.js"],"names":["compute","Compute","args","value","get","computeGet","tag","getValue","result","reduce","details","arg","index","results","push","path","getPath","indexOf","Object","keys","slice","previousFuncIndex","length"],"mappings":";;;;;;;;;kBAuDwBA,O;;AAvDxB;;;;;;;;;;IAEaC,O,WAAAA,O;AACX,mBAAYC,IAAZ,EAAkB;AAAA;;AAChB,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAa,IAAb;AACD;;;;6BACQC,G,EAAK;AACZ,UAAMC,aAAa,SAAbA,UAAa,CAASC,GAAT,EAAc;AAC/B,eAAOA,IAAIC,QAAJ,CAAaH,GAAb,CAAP;AACD,OAFD;AAGA,UAAMI,SAAS,KAAKN,IAAL,CAAUO,MAAV,CACb,UAACC,OAAD,EAAUC,GAAV,EAAeC,KAAf,EAAyB;AACvB,YAAID,eAAeV,OAAnB,EAA4B;AAC1BS,kBAAQG,OAAR,CAAgBC,IAAhB,CAAqBH,IAAIJ,QAAJ,CAAaH,GAAb,CAArB;;AAEA,iBAAOM,OAAP;AACD,SAJD,MAIO,IAAIC,4BAAJ,EAAwB;AAC7B,cAAMI,OAAOJ,IAAIK,OAAJ,CAAYZ,GAAZ,CAAb;;AAEA,cAAIW,KAAKE,OAAL,CAAa,IAAb,IAAqB,CAAzB,EAA4B;AAC1B,gBAAMd,QAAQQ,IAAIJ,QAAJ,CAAaH,GAAb,CAAd;;AAEAM,oBAAQG,OAAR,CAAgBC,IAAhB,CAAqBX,QAAQe,OAAOC,IAAP,CAAYhB,KAAZ,CAAR,GAA6B,EAAlD;AACD,WAJD,MAIO;AACLO,oBAAQG,OAAR,CAAgBC,IAAhB,CAAqBH,IAAIJ,QAAJ,CAAaH,GAAb,CAArB;AACD;;AAED,iBAAOM,OAAP;AACD,SAZM,MAYA,IAAI,OAAOC,GAAP,KAAe,UAAnB,EAA+B;AACpCD,kBAAQG,OAAR,CAAgBC,IAAhB,CACEH,wCACKD,QAAQG,OAAR,CAAgBO,KAAhB,CAAsBV,QAAQW,iBAA9B,EAAiDT,KAAjD,CADL,UAEEP,UAFF,GADF;AAMAK,kBAAQW,iBAAR,GAA4BT,KAA5B;;AAEA,iBAAOF,OAAP;AACD;;AAEDA,gBAAQG,OAAR,CAAgBC,IAAhB,CAAqBH,GAArB;;AAEA,eAAOD,OAAP;AACD,OAjCY,EAkCb;AACEG,iBAAS,EADX;AAEEQ,2BAAmB;AAFrB,OAlCa,CAAf;;AAwCA,aAAOb,OAAOK,OAAP,CAAeL,OAAOK,OAAP,CAAeS,MAAf,GAAwB,CAAvC,CAAP;AACD;;;;;;AAGY,SAAStB,OAAT,GAA0B;AAAA,oCAANE,IAAM;AAANA,QAAM;AAAA;;AACvC,SAAO,IAAID,OAAJ,CAAYC,IAAZ,CAAP;AACD","file":"Compute.js","sourcesContent":["import Tag from './tags/Tag'\n\nexport class Compute {\n  constructor(args) {\n    this.args = args\n    this.value = null\n  }\n  getValue(get) {\n    const computeGet = function(tag) {\n      return tag.getValue(get)\n    }\n    const result = this.args.reduce(\n      (details, arg, index) => {\n        if (arg instanceof Compute) {\n          details.results.push(arg.getValue(get))\n\n          return details\n        } else if (arg instanceof Tag) {\n          const path = arg.getPath(get)\n\n          if (path.indexOf('.*') > 0) {\n            const value = arg.getValue(get)\n\n            details.results.push(value ? Object.keys(value) : [])\n          } else {\n            details.results.push(arg.getValue(get))\n          }\n\n          return details\n        } else if (typeof arg === 'function') {\n          details.results.push(\n            arg(\n              ...details.results.slice(details.previousFuncIndex, index),\n              computeGet\n            )\n          )\n          details.previousFuncIndex = index\n\n          return details\n        }\n\n        details.results.push(arg)\n\n        return details\n      },\n      {\n        results: [],\n        previousFuncIndex: 0,\n      }\n    )\n\n    return result.results[result.results.length - 1]\n  }\n}\n\nexport default function compute(...args) {\n  return new Compute(args)\n}\n"]}