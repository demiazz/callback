{"version":3,"sources":["../src/Model.js"],"names":["Model","initialState","devtools","preventExternalMutations","state","freezeObject","changedPaths","value","Array","isArray","slice","Object","assign","object","isFrozen","key","e","freeze","changes","path","cb","forceChildPathUpdates","length","updateInFrozen","reduce","currentState","index","join","currentValue","push","splice","unfreezeObject","allowedTypes","values","forEach","verifyValue","undefined","updateIn","_","parent","array","get","prop","set","concat","pop","shift","unshift","args","verifyValues"],"mappings":"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","file":"Model.js","sourcesContent":["import {\n  isObject,\n  isComplexObject,\n  isSerializable,\n  throwError,\n  forceSerializable,\n} from './utils'\n\nclass Model {\n  constructor(initialState = {}, devtools = null) {\n    this.devtools = devtools\n    this.preventExternalMutations = devtools\n      ? devtools.preventExternalMutations\n      : false\n\n    this.state = this.preventExternalMutations\n      ? this.freezeObject(initialState)\n      : initialState\n    this.changedPaths = []\n  }\n  /*\n    Does an unfreeze and update of value, before freezing again\n  */\n  unfreezeObject(value) {\n    if (Array.isArray(value)) {\n      return value.slice()\n    } else if (isObject(value)) {\n      return Object.assign({}, value)\n    }\n\n    return value\n  }\n  /*\n    Freezes objects and arrays recursively to avoid unwanted mutation\n  */\n  freezeObject(object) {\n    if (!Object.isFrozen(object) && isComplexObject(object)) {\n      for (const key in object) {\n        // Properties might not be writable, but then there\n        // is not reason to freeze its value either\n        try {\n          object[key] = this.freezeObject(object[key])\n        } catch (e) {}\n      }\n\n      Object.freeze(object)\n    }\n\n    return object\n  }\n  /*\n    Returns array of changes\n  */\n  flush() {\n    const changes = this.changedPaths.slice()\n\n    this.changedPaths = []\n\n    return changes\n  }\n  /*\n    A generic method for making a change to a path, used\n    by multiple mutation methods. Only adds to flush when value\n    actually changed. Complex objects always causes a flush due to\n    for example array sorting\n  */\n  updateIn(path, cb, forceChildPathUpdates = false) {\n    if (!path.length) {\n      cb(this.state, this, 'state')\n      this.state = this.preventExternalMutations\n        ? this.freezeObject(this.state)\n        : this.state\n\n      return\n    }\n\n    if (this.preventExternalMutations) {\n      this.updateInFrozen(path, cb, forceChildPathUpdates)\n\n      return\n    }\n\n    path.reduce((currentState, key, index) => {\n      if (index === path.length - 1) {\n        if (!Array.isArray(currentState) && !isObject(currentState)) {\n          throwError(\n            `The path \"${path.join('.')}\" is invalid, can not update state. Does the path \"${path.join('.')}\" exist?`\n          )\n        }\n\n        const currentValue = currentState[key]\n\n        cb(currentState[key], currentState, key)\n        if (\n          currentState[key] !== currentValue ||\n          (isComplexObject(currentState[key]) && isComplexObject(currentValue))\n        ) {\n          this.changedPaths.push({\n            path,\n            forceChildPathUpdates,\n          })\n        }\n      } else if (!currentState[key]) {\n        throwError(\n          `The path \"${path.join('.')}\" is invalid, can not update state. Does the path \"${path\n            .splice(0, path.length - 1)\n            .join('.')}\" exist?`\n        )\n      }\n\n      return currentState[key]\n    }, this.state)\n  }\n  /*\n    Unfreezes on the way down. When done freezes state. It is optimized\n    to not go down already frozen paths\n  */\n  updateInFrozen(path, cb, forceChildPathUpdates) {\n    this.state = this.unfreezeObject(this.state)\n    path.reduce((currentState, key, index) => {\n      if (index === path.length - 1) {\n        if (!Array.isArray(currentState) && !isObject(currentState)) {\n          throwError(\n            `The path \"${path.join('.')}\" is invalid, can not update state. Does the path \"${path.join('.')}\" exist?`\n          )\n        }\n        currentState[key] = this.unfreezeObject(currentState[key])\n\n        const currentValue = currentState[key]\n        cb(currentState[key], currentState, key)\n\n        if (\n          currentState[key] !== currentValue ||\n          (isComplexObject(currentState[key]) && isComplexObject(currentValue))\n        ) {\n          this.changedPaths.push({\n            path,\n            forceChildPathUpdates,\n          })\n        }\n      } else if (!currentState[key]) {\n        throwError(\n          `The path \"${path.join('.')}\" is invalid, can not update state. Does the path \"${path\n            .splice(0, path.length - 1)\n            .join('.')}\" exist?`\n        )\n      } else {\n        currentState[key] = this.unfreezeObject(currentState[key])\n      }\n\n      return currentState[key]\n    }, this.state)\n\n    this.freezeObject(this.state)\n  }\n  /*\n    Checks if value is serializable, if turned on\n  */\n  verifyValue(value, path) {\n    if (this.devtools && !isSerializable(value, this.devtools.allowedTypes)) {\n      throwError(\n        `You are passing a non serializable value into the state tree on path \"${path.join('.')}\"`\n      )\n    }\n    if (this.devtools) {\n      forceSerializable(value)\n    }\n  }\n  verifyValues(values, path) {\n    if (this.devtools) {\n      values.forEach(value => {\n        this.verifyValue(value, path)\n      })\n    }\n  }\n  get(path = []) {\n    return path.reduce((currentState, key) => {\n      return currentState ? currentState[key] : undefined\n    }, this.state)\n  }\n  set(path, value) {\n    this.verifyValue(value, path)\n    this.updateIn(\n      path,\n      (_, parent, key) => {\n        parent[key] = value\n      },\n      true\n    )\n  }\n  toggle(path) {\n    this.updateIn(path, (value, parent, key) => {\n      parent[key] = !value\n    })\n  }\n  push(path, value) {\n    this.verifyValue(value, path)\n    this.updateIn(path, array => {\n      array.push(value)\n    })\n  }\n  merge(path, ...values) {\n    const value = Object.assign(...values)\n\n    // If we already have an object we make it behave\n    // like multiple sets, indicating a change to very key.\n    // If no value it should indicate that we are setting\n    // a new object\n    if (this.get(path)) {\n      for (let prop in value) {\n        this.set(path.concat(prop), value[prop])\n      }\n    } else {\n      this.set(path, value)\n    }\n  }\n  pop(path) {\n    this.updateIn(path, array => {\n      array.pop()\n    })\n  }\n  shift(path) {\n    this.updateIn(path, array => {\n      array.shift()\n    })\n  }\n  unshift(path, value) {\n    this.verifyValue(value, path)\n    this.updateIn(path, array => {\n      array.unshift(value)\n    })\n  }\n  splice(path, ...args) {\n    this.verifyValues(args, path)\n    this.updateIn(path, array => {\n      array.splice(...args)\n    })\n  }\n  unset(path) {\n    this.updateIn(\n      path,\n      (_, parent, key) => {\n        delete parent[key]\n      },\n      true\n    )\n  }\n  concat(path, value) {\n    this.verifyValue(value, path)\n    this.updateIn(path, (array, parent, key) => {\n      parent[key] = array.concat(value)\n    })\n  }\n}\n\nexport default Model\n"]}