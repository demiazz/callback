{"version":3,"sources":["../src/UniversalController.js"],"names":["UniversalController","controllerOptions","changes","model","state","JSON","parse","stringify","trackChanges","bind","on","hasRun","concat","reduce","change","path","join","getState","sequence","payload"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;;;;;;;IAEMA,mB;;;AACJ,+BAAYC,iBAAZ,EAA+B;AAAA;;AAAA,0IACvBA,iBADuB;;AAE7B,UAAKC,OAAL,GAAe,EAAf;AACA,UAAKC,KAAL,CAAWC,KAAX,GAAmBC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAe,MAAKJ,KAAL,CAAWC,KAA1B,CAAX,CAAnB;AACA,UAAKI,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,OAApB;AACA,UAAKC,EAAL,CAAQ,OAAR,EAAiB,MAAKF,YAAtB;AACA,UAAKG,MAAL,GAAc,KAAd;AAN6B;AAO9B;;;;iCACYT,O,EAAS;AACpB,WAAKA,OAAL,GAAe,KAAKA,OAAL,CAAaU,MAAb,CAAoBV,OAApB,CAAf;AACD;;;gCACW;AAAA;;AACV,UAAME,QAAQC,KAAKE,SAAL,CACZ,KAAKL,OAAL,CAAaW,MAAb,CAAoB,UAACX,OAAD,EAAUY,MAAV,EAAqB;AACvCZ,gBAAQY,OAAOC,IAAP,CAAYC,IAAZ,CAAiB,GAAjB,CAAR,IAAiC,OAAKC,QAAL,CAAcH,OAAOC,IAArB,CAAjC;;AAEA,eAAOb,OAAP;AACD,OAJD,EAIG,EAJH,CADY,CAAd;;AAQA,kDAA0CE,KAA1C;AACD;;;wBACGc,Q,EAAUC,O,EAAS;AACrB,UAAI,KAAKR,MAAT,EAAiB;AACf,+BACE,2EADF;AAGD;AACD,WAAKA,MAAL,GAAc,IAAd;;AAEA,2IAAiB,yBAAjB,EAA4CO,QAA5C,EAAsDC,OAAtD;AACD;;;;;;kBAGYnB,mB","file":"UniversalController.js","sourcesContent":["import Controller from './Controller'\nimport { throwError } from './utils'\n\nclass UniversalController extends Controller {\n  constructor(controllerOptions) {\n    super(controllerOptions)\n    this.changes = []\n    this.model.state = JSON.parse(JSON.stringify(this.model.state))\n    this.trackChanges = this.trackChanges.bind(this)\n    this.on('flush', this.trackChanges)\n    this.hasRun = false\n  }\n  trackChanges(changes) {\n    this.changes = this.changes.concat(changes)\n  }\n  getScript() {\n    const state = JSON.stringify(\n      this.changes.reduce((changes, change) => {\n        changes[change.path.join('.')] = this.getState(change.path)\n\n        return changes\n      }, {})\n    )\n\n    return `<script>window.CEREBRAL_STATE = ${state}</script>`\n  }\n  run(sequence, payload) {\n    if (this.hasRun) {\n      throwError(\n        'You can not run the universal controller more than once, create a new one'\n      )\n    }\n    this.hasRun = true\n\n    return super.run('UniversalController.run', sequence, payload)\n  }\n}\n\nexport default UniversalController\n"]}