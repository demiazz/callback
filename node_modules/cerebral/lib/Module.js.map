{"version":3,"sources":["../src/Module.js"],"names":["Module","controller","path","moduleDescription","stringPath","join","moduleStub","name","slice","pop","module","getModel","set","state","signals","Object","keys","reduce","currentSignals","signalKey","signal","catch","Map","concat","run","payload","runSignal","modules","registered","moduleKey"],"mappings":";;;;;;AAAA;;;;;;IAEMA,M,GACJ,gBAAYC,UAAZ,EAAwBC,IAAxB,EAA8BC,iBAA9B,EAAiD;AAAA;;AAC/C,MAAMC,aAAaF,KAAKG,IAAL,CAAU,GAAV,CAAnB;AACA,MAAMC,aAAa;AACjBL,0BADiB;AAEjBC,UAAME,UAFW;AAGjBG,UAAML,KAAKM,KAAL,GAAaC,GAAb;AAHW,GAAnB;;AAMA,MAAMC,SAAS,OAAOP,iBAAP,KAA6B,UAA7B,GACXA,kBAAkBG,UAAlB,CADW,GAEXH,iBAFJ;;AAIA;AACAF,aAAWU,QAAX,GAAsBC,GAAtB,CAA0BV,IAA1B,EAAgCQ,OAAOG,KAAP,IAAgB,EAAhD;AACA;AACAH,SAAOI,OAAP,GAAiBC,OAAOC,IAAP,CACfN,OAAOI,OAAP,IAAkB,EADH,EAEfG,MAFe,CAER,UAACC,cAAD,EAAiBC,SAAjB,EAA+B;AACtC,QAAMC,SAASV,OAAOI,OAAP,CAAeK,SAAf,CAAf;AACA,QAAI,CAACC,MAAL,EAAa;AACX,oDACuBD,SADvB;AAGD;AACDD,mBAAeC,SAAf,IAA4B;AAC1BC,cAAQA,OAAOA,MAAP,IAAiBA,MADC;AAE1BC,aAAOD,OAAOC,KAAP,IAAgBpB,WAAWoB,KAA3B,GACH,IAAIC,GAAJ,CACE,GACGC,MADH,CACUtB,WAAWoB,KAAX,gCAAuBpB,WAAWoB,KAAlC,KAA2C,EADrD,EAEGE,MAFH,CAEUH,OAAOC,KAAP,gCAAmBD,OAAOC,KAA1B,KAAmC,EAF7C,CADF,CADG,GAMH,IARsB;AAS1BG,SAT0B,eAStBC,OATsB,EASb;AACXxB,mBAAWyB,SAAX,CACExB,KAAKqB,MAAL,CAAYJ,SAAZ,EAAuBd,IAAvB,CAA4B,GAA5B,CADF,EAEEe,OAAOA,MAAP,IAAiBA,MAFnB,EAGEK,OAHF;AAKD;AAfyB,KAA5B;;AAkBA,WAAOP,cAAP;AACD,GA5BgB,EA4Bd,EA5Bc,CAAjB;;AA8BA;AACAR,SAAOiB,OAAP,GAAiBZ,OAAOC,IAAP,CACfN,OAAOiB,OAAP,IAAkB,EADH,EAEfV,MAFe,CAER,UAACW,UAAD,EAAaC,SAAb,EAA2B;AAClCD,eAAWC,SAAX,IAAwB,IAAI7B,MAAJ,CACtBC,UADsB,EAEtBC,KAAKqB,MAAL,CAAYM,SAAZ,CAFsB,EAGtBnB,OAAOiB,OAAP,CAAeE,SAAf,CAHsB,CAAxB;AAKA,WAAOD,UAAP;AACD,GATgB,EASd,EATc,CAAjB;;AAWA,SAAOlB,MAAP;AACD,C;;kBAGYV,M","file":"Module.js","sourcesContent":["import { throwError } from './utils'\n\nclass Module {\n  constructor(controller, path, moduleDescription) {\n    const stringPath = path.join('.')\n    const moduleStub = {\n      controller,\n      path: stringPath,\n      name: path.slice().pop(),\n    }\n\n    const module = typeof moduleDescription === 'function'\n      ? moduleDescription(moduleStub)\n      : moduleDescription\n\n    /* Set initial module state to model */\n    controller.getModel().set(path, module.state || {})\n    /* Convert arrays to actually runable signals */\n    module.signals = Object.keys(\n      module.signals || {}\n    ).reduce((currentSignals, signalKey) => {\n      const signal = module.signals[signalKey]\n      if (!signal) {\n        throwError(\n          `Signal with name \"${signalKey}\" is undefined. Please check that the signal is set to either an array or a function.`\n        )\n      }\n      currentSignals[signalKey] = {\n        signal: signal.signal || signal,\n        catch: signal.catch || controller.catch\n          ? new Map(\n              []\n                .concat(controller.catch ? [...controller.catch] : [])\n                .concat(signal.catch ? [...signal.catch] : [])\n            )\n          : null,\n        run(payload) {\n          controller.runSignal(\n            path.concat(signalKey).join('.'),\n            signal.signal || signal,\n            payload\n          )\n        },\n      }\n\n      return currentSignals\n    }, {})\n\n    /* Instantiate submodules */\n    module.modules = Object.keys(\n      module.modules || {}\n    ).reduce((registered, moduleKey) => {\n      registered[moduleKey] = new Module(\n        controller,\n        path.concat(moduleKey),\n        module.modules[moduleKey]\n      )\n      return registered\n    }, {})\n\n    return module\n  }\n}\n\nexport default Module\n"]}